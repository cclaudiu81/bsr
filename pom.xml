<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>lyma-core-services</groupId>
    <artifactId>lyma-core-services</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <spring.version>4.2.4.RELEASE</spring.version>
        <aspectj.runtime.version>1.7.1</aspectj.runtime.version>
        <aspectj.weaver.version>1.7.1</aspectj.weaver.version>
        <slf4j.version>1.7.16</slf4j.version>
        <junit.version>4.12</junit.version>
        <mockito.version>1.9.5</mockito.version>
        <google.guava.version>19.0</google.guava.version>

        <java.version>1.8</java.version>
        <mvn.compiler.plugin.version>3.5.1</mvn.compiler.plugin.version>
    </properties>

    <!-- module definitions -->
    <modules>
        <!-- lyma-module for exposing the endpoints through REST protocol
        Note: This module is responsible entirely for exposing the backend implementation through REST procotol -->
        <module>lyma-core-ws</module>

        <!-- lyma-module for integrating the communication with any persistence layer
         Note: Current implementation uses JPA for abstracting the concrete sql-procedures -->
        <module>lyma-core-persistence</module>

        <!-- lyma-module for modularizing domain-core-objects: Entities, Value Objects, and Services
         Note: This module should be agnostic of any framework related dependencies and should implement
            domain-specific logic through POJOs -->
        <module>lyma-core-domain</module>

        <!-- lyma-module for decoupling the core-domain-module from the way it's implementation is exposed through REST module
         Note: It's responsibility is to behave as a BUS that "reacts" to events coming from REST endpoints(client),
         creation of a events and processing them asynchronously
         Current implementation uses google's guava AsyncEventBus(that implements the producer/consumer semantics)
         The 2nd responsibility is to implement "glue" interface with the domain-core-module -->
        <module>lyma-core-async-bus</module>
    </modules>

    <!-- declared global dependencies that other descendants will inherit from parent-project -->
    <dependencyManagement>
        <!-- use inversion-of-control with spring across all project -->
        <dependencies>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>1</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- enable aop for separating the cross-cutting concerns -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- enable spring transaction support:: TODO maybe move this to another module -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>


            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${aspectj.runtime.version}</version>
            </dependency>

            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectj.weaver.version}</version>
            </dependency>

            <!-- enable logging across the entire project -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <!-- enable junit testing framework -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <!-- enable mocking across unit-testing -->
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>${mockito.version}</version>
            </dependency>


            <!-- enable guava's powerful api: collections, immutabilities, lazyness, eventBus, caching -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${google.guava.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${mvn.compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>